{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gvega\\\\Downloads\\\\Opossum\\\\maeville\\\\src\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { changeName } from \"./redux/actions\"; //This alone creates a function that we can use as a component\n//Does not work when I use props: Lets use class. I like class more... Turns out he says using function components is better.\n\nconst Main = props => {\n  _s();\n\n  useEffect(() => {\n    props.changeName(\"Perro\");\n  }, []); //console.log(props)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n/*\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n      mainCharacter: state\r\n    }\r\n  }\r\n  export default connect(mapStateToProps)(myComponent); // <- This would give you all the props to this component, without passing through every other component. Only do it when your components are deeply nested.\r\n*/\n\n\n_s(Main, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/gvega/Downloads/Opossum/maeville/src/Main.js"],"names":["React","useEffect","changeName","Main","props"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,UAAR,QAAyB,iBAAzB,C,CAEA;AACA;;AAEA,MAAMC,IAAI,GAAKC,KAAF,IAAa;AAAA;;AAEtBH,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,KAAK,CAACF,UAAN,CAAiB,OAAjB;AACH,GAFQ,EAEP,EAFO,CAAT,CAFsB,CAMtB;;AACA,sBACI;AAAA,2BACI;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAxBMC,I;;KAAAA,I;AA0BN,eAAeA,IAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {changeName} from \"./redux/actions\";\r\n\r\n//This alone creates a function that we can use as a component\r\n//Does not work when I use props: Lets use class. I like class more... Turns out he says using function components is better.\r\n\r\nconst Main = ( props ) => {\r\n\r\n    useEffect(() => {    \r\n        props.changeName(\"Perro\")\r\n    },[]);\r\n\r\n    //console.log(props)\r\n    return( \r\n        <div>\r\n            <p></p>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n/*\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction mapStateToProps(state){\r\n    return{\r\n      mainCharacter: state\r\n    }\r\n  }\r\n  export default connect(mapStateToProps)(myComponent); // <- This would give you all the props to this component, without passing through every other component. Only do it when your components are deeply nested.\r\n*/\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}